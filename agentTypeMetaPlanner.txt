:- use_module(library(sockets)), 
   use_module(library(random3)),
   use_module(library(lists)).
   
:-dynamic current_identifier/1.
:-dynamic current_size/1.
:-dynamic current_forbidden/2.
:-dynamic size_move_to_evaluate/1.
:-dynamic move_to_evaluate/4.
:-dynamic state/1.

net_ip(localhost).
net_port(3333).

open_web_socket(Stream):- net_ip(IP), net_port(PORT), socket_client_open(IP:PORT, Stream, [type(text)]).
close_web_socket(Stream):- close(Stream).

sendData(X) :- agent(M), open_web_socket(Stream),
               write(Stream,M), write(Stream,'_.._'),
               current_identifier(Identifier),
               write(Stream,Identifier), write(Stream,'_.._'),
               write(Stream,X),
               close_web_socket(Stream).
sendData(X, Y) :- agent(M), open_web_socket(Stream),
               write(Stream,M), write(Stream,'_.._'),
               current_identifier(Identifier),
               write(Stream,Identifier), write(Stream,'_.._'),
               write(Stream,X), write(Stream,'_.._'),
               write(Stream,Y),
               close_web_socket(Stream).

problem_failedE(Problem):- send_failed(Problem), S1 is Problem+1, relaunch_instance(S1).

relaunch_instance(2):- current_size(N), current_identifier(ID), retractall(state(_)), assert(state(0)), messageA(agPlanner, send_message(start_search(ID,N,'ss2'),agMetaPlanner)).
relaunch_instance(3):- current_size(N), current_identifier(ID), retractall(state(_)), assert(state(0)), messageA(agPlanner, send_message(start_search(ID,N,'ss4'),agMetaPlanner)).
relaunch_instance(4):- current_size(N), current_identifier(ID), retractall(state(_)), assert(state(0)), messageA(agPlanner, send_message(start_search(ID,N,'ss3'),agMetaPlanner)), messageA(agPlanner, send_message(start_trivial_search, agMetaPlanner)).


send_failed(1):-sendData('pf1').
send_failed(2):-sendData('pf2').
send_failed(3):-sendData('pf3').
send_failed(4):-sendData('pft').


new_forbiddens_to_saveE:- retractall(current_forbidden(_,_)).

forbidden_to_saveE(X,Y):- assert(current_forbidden(X,Y)).

find_planE(N, ID):- retractall(current_size(_)), assert(current_size(N)), retractall(current_identifier(_)), assert(current_identifier(ID)), send_forbidden.



send_forbidden:- findall(current_forbidden(X1,Y1),current_forbidden(X1,Y1),List), messageA(agPlanner,send_message(new_forbiddens_to_save, agMetaPlanner)),send_forbidden_to_save(List).

send_forbidden_to_save([]):- write('Interrogates planner'),launch_instance.
send_forbidden_to_save([current_forbidden(X1,Y1)|T]):- messageA(agPlanner,send_message(forbidden_to_save(X1,Y1), agMetaPlanner)), send_forbidden_to_save(T). 

launch_instance:- current_size(N), current_identifier(ID), retractall(state(_)), assert(state(0)), messageA(agPlanner, send_message(start_search(ID,N,'ss1'),agMetaPlanner)).

new_moves_for_evaluateE(NumberOfMoves):> write('Moves to be evaluated'), nl, retractall(size_move_to_evaluate(_)), retractall(move_to_evaluate(_,_,_,_)), assert(size_move_to_evaluate(NumberOfMoves)), retractall(state(_)), assert(state(1)), messageA(agCoordinator, send_message(next_state, agMetaPlanner)), sendData('smr').

moves_for_evaluateE(Move):- write(.), save_move_to_evaluate(Move), write(.).

save_move_to_evaluate([X1|[Y1|[X2|[Y2|T]]]]):- assert(move_to_evaluate(X1,Y1,X2,Y2)), size_move_to_evaluate(S), retractall(size_move_to_evaluate(_)), S1 is S-1, assert(size_move_to_evaluate(S1)).

ready_for_elaboration:- state(1), size_move_to_evaluate(0), nl,write('Processing moves'), nl.
ready_for_elaborationI:> retractall(state(_)), messageA(agCoordinator, send_message(next_state, agMetaPlanner)), evaluate_path.	

evaluate_path:- trivial_evaluation(Cicle), retractall(move_to_evaluate(_,_,_,_)), saveBestCicle(Cicle), messageA(agCoordinator, send_message(evaluation_completed, agMetaPlanner)), send_move(Cicle).
evaluate_path:- send_failed(3), launch_instance(3), true.

send_move([]):- messageA(agCoordinator, send_message(response_trivial_evaluation, agMetaPlanner)), true.
send_move([move(X1,Y1,X2,Y2)|T]):- messageA(agCoordinator, send_message(response_move(X1,Y1,X2,Y2), agMetaPlanner)), send_move(T).


trivial_evaluation(L):-searchCicles(L), length(L, Len), Len>2.
simple_evaluation:-searchBestTour(Cicle).

searchBestTour(Cicle):-longest_cicle(Cicle), retractall(move_to_evaluate(_,_,_,_)), saveBestCicle(Cicle).

saveBestCicle([]):-true.
saveBestCicle([move(X1,Y1,X2,Y2)|T]):- assert(move_to_evaluate(X1,Y1,X2,Y2)), saveBestCicle(T).

searchCicles([move(X1,Y1,X2,Y2)|L]):-move_to_evaluate(X1,Y1,X2,Y2), cicle(X1,Y1,X2,Y2, L).
cicle(X,Y,X1,Y1,[move(X1,Y1,X,Y)|[]]):- move_to_evaluate(X1,Y1,X,Y), retract(move_to_evaluate(X1,Y1,X,Y)).
cicle(X,Y,X1,Y1,[move(X1,Y1,X2,Y2)|L]):-move_to_evaluate(X1,Y1,X2,Y2), retract(move_to_evaluate(X1,Y1,X2,Y2)), cicle(X,Y,X2,Y2, L).

get_longer_list(L1, L2, L1) :- length(L1, Len1), length(L2, Len2), Len1 > Len2.
get_longer_list(_L1, L2, L2) :- true.

select_element(Goal, [Head | Tail], Selected) :- select_element(Goal, Tail, Head, Selected).
select_element(_Goal, [], Selected, Selected) :- true.
select_element(Goal, [Head | Tail], Current, FinalSelected) :- call(Goal, Head, Current, Selected),
    select_element(Goal, Tail, Selected, FinalSelected).

longest_cicle(LongestCicle):- findall(L1,searchCicles(L1), Cicles), select_element(get_longer_list, Cicles, LongestCicle).




